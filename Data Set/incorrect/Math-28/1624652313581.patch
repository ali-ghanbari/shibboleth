diff -w -r -u Math28b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java Math28b_Patch541/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
--- /src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	2019-03-31 14:20:05.000000000 -0400
+++ /src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	2019-03-31 15:31:10.000000000 -0400
@@ -115,17 +115,6 @@
         } else if (minRatioPositions.size() > 1) {
             // there's a degeneracy as indicated by a tie in the minimum ratio test
 
-            // 1. check if there's an artificial variable that can be forced out of the basis
-                for (Integer row : minRatioPositions) {
-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                        int column = i + tableau.getArtificialVariableOffset();
-                        final double entry = tableau.getEntry(row, column);
-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
-                            return row;
-                        }
-                    }
-                }
-
             // 2. apply Bland's rule to prevent cycling:
             //    take the row for which the corresponding basic variable has the smallest index
             //
