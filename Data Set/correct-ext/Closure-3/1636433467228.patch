--- /src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
+++ /src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
@@ -152,7 +152,7 @@
     reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);
     reachingUses.analyze();
     for (Candidate c : candidates) {
+      if (c.canInline(t.getScope())) {
-      if (c.canInline()) {
         c.inlineVariable();
 
         // If definition c has dependencies, then inlining it may have
@@ -277,7 +277,7 @@
       return defMetadata.node;
     }
 
+    private boolean canInline(final Scope scope) {
-    private boolean canInline() {
       // Cannot inline a parameter.
       if (getDefCfgNode().isFunction()) {
         return false;
@@ -372,6 +372,12 @@
                   case Token.REGEXP:
                   case Token.NEW:
                     return true;
+                  case Token.NAME:
+                    Var var = scope.getOwnSlot(input.getString());
+                    if (var != null
+                        && var.getParentNode().isCatch()) {
+                      return true;
+                    }
                 }
                 return false;
               }
