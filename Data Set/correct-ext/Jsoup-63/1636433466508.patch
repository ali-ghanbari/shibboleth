--- /src/main/java/org/jsoup/parser/HtmlTreeBuilder.java
+++ /src/main/java/org/jsoup/parser/HtmlTreeBuilder.java
@@ -224,12 +224,11 @@
         insertNode(el);
         if (startTag.isSelfClosing()) {
             if (tag.isKnownTag()) {
+                if (!tag.isEmpty())
+                    tokeniser.error("Tag cannot be self closing; not a void tag");
-                if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();
             }
+            else // unknown tag, remember this is self closing for output
-            else {
                 tag.setSelfClosing();
-                tokeniser.acknowledgeSelfClosingFlag();
-            }
         }
         return el;
     }
--- /src/main/java/org/jsoup/parser/Tokeniser.java
+++ /src/main/java/org/jsoup/parser/Tokeniser.java
@@ -33,7 +33,6 @@
     Token.Doctype doctypePending = new Token.Doctype(); // doctype building up
     Token.Comment commentPending = new Token.Comment(); // comment building up
     private String lastStartTag; // the last start tag emitted, to test appropriate end tag
-    private boolean selfClosingFlagAcknowledged = true;
 
     Tokeniser(CharacterReader reader, ParseErrorList errors) {
         this.reader = reader;
@@ -41,10 +40,6 @@
     }
 
     Token read() {
-        if (!selfClosingFlagAcknowledged) {
-            error("Self closing flag not acknowledged");
-            selfClosingFlagAcknowledged = true;
-        }
         while (!isEmitPending)
             state.read(this, reader);
 
@@ -73,8 +68,6 @@
         if (token.type == Token.TokenType.StartTag) {
             Token.StartTag startTag = (Token.StartTag) token;
             lastStartTag = startTag.tagName;
-            if (startTag.selfClosing)
-                selfClosingFlagAcknowledged = false;
         } else if (token.type == Token.TokenType.EndTag) {
             Token.EndTag endTag = (Token.EndTag) token;
             if (endTag.attributes != null)
@@ -121,9 +114,6 @@
         this.state = state;
     }
 
-    void acknowledgeSelfClosingFlag() {
-        selfClosingFlagAcknowledged = true;
-    }
     final private int[] codepointHolder = new int[1]; // holder to not have to keep creating arrays
     final private int[] multipointHolder = new int[2];
     int[] consumeCharacterReference(Character additionalAllowedCharacter, boolean inAttribute) {
