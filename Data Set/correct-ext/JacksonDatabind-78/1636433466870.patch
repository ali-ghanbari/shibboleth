--- /src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
+++ /src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
@@ -45,14 +45,28 @@
      *
      * @since 2.8.9
      */
+    protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES;
+    static {
+        Set<String> s = new HashSet<>();
         // Courtesy of [https://github.com/kantega/notsoserial]:
         // (and wrt [databind#1599]
+        s.add("org.apache.commons.collections.functors.InvokerTransformer");
+        s.add("org.apache.commons.collections.functors.InstantiateTransformer");
+        s.add("org.apache.commons.collections4.functors.InvokerTransformer");
+        s.add("org.apache.commons.collections4.functors.InstantiateTransformer");
+        s.add("org.codehaus.groovy.runtime.ConvertedClosure");
+        s.add("org.codehaus.groovy.runtime.MethodClosure");
+        s.add("org.springframework.beans.factory.ObjectFactory");
+        s.add("com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl");
+        DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
+    }
 
     /**
      * Set of class names of types that are never to be deserialized.
      *
      * @since 2.8.9
      */
+    protected Set<String> _cfgIllegalClassNames = DEFAULT_NO_DESER_CLASS_NAMES;
 
     /*
     /**********************************************************
@@ -153,6 +167,7 @@
             return null;
         }
         // For checks like [databind#1599]
+        checkIllegalTypes(ctxt, type, beanDesc);
         // Use generic bean introspection to build deserializer
         return buildBeanDeserializer(ctxt, type, beanDesc);
     }
@@ -875,7 +890,17 @@
     /**
      * @since 2.8.9
      */
+    protected void checkIllegalTypes(DeserializationContext ctxt, JavaType type,
+            BeanDescription beanDesc)
+        throws JsonMappingException
+    {
         // There are certain nasty classes that could cause problems, mostly
         // via default typing -- catch them here.
+        String full = type.getRawClass().getName();
 
+        if (_cfgIllegalClassNames.contains(full)) {
+            ctxt.reportBadTypeDefinition(beanDesc,
+                    "Illegal type (%s) to deserialize: prevented for security reasons", full);
+        }
+    }
 }
