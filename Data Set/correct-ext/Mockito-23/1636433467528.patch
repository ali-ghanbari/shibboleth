--- /src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ /src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -41,14 +41,16 @@
     
     private static final long serialVersionUID = -7105341425736035847L;
 
+    private transient MockitoCore mockitoCore;
+    private transient ReturnsEmptyValues delegate;
-    private MockitoCore mockitoCore = new MockitoCore();
-    private ReturnsEmptyValues delegate = new ReturnsEmptyValues();
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
         GenericMetadataSupport returnTypeGenericMetadata =
                 actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());
 
         Class<?> rawType = returnTypeGenericMetadata.rawType();
+        instantiateMockitoCoreIfNeeded();
+        instantiateDelegateIfNeeded();
         if (!mockitoCore.isTypeMockable(rawType)) {
             return delegate.returnValueFor(rawType);
         }
@@ -56,7 +58,17 @@
         return getMock(invocation, returnTypeGenericMetadata);
     }
 
+    private synchronized void instantiateMockitoCoreIfNeeded() {
+        if (mockitoCore == null) {
+            mockitoCore = new MockitoCore();
+        }
+    }
 
+    private synchronized void instantiateDelegateIfNeeded() {
+        if (delegate == null) {
+            delegate = new ReturnsEmptyValues();
+        }
+    }
 
     private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {
     	InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
@@ -97,6 +109,7 @@
                 : withSettings();
 
         return mockSettings
+		        .serializable()
                 .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
     }
 
@@ -111,7 +124,7 @@
 
     private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {
 
+        container.addAnswer(new SerializableAnswer() {
-        container.addAnswer(new Answer<Object>() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 return mock;
             }
@@ -120,7 +133,9 @@
         return mock;
     }
 	
+	abstract class SerializableAnswer implements Answer<Object>, Serializable {
 		
+	}
 	
 
     protected GenericMetadataSupport actualParameterizedType(Object mock) {
